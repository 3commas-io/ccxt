import os
import sys

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))
sys.path.append(root)

# ----------------------------------------------------------------------------

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

# ----------------------------------------------------------------------------
# -*- coding: utf-8 -*-

from ccxt.test.exchange.base import test_currency  # noqa E402
from ccxt.test.exchange.base import test_shared_methods  # noqa E402

def test_fetch_currencies(exchange, skipped_properties):
    method = 'fetchCurrencies'
    # const isNative = exchange.has['fetchCurrencies'] && exchange.has['fetchCurrencies'] !== 'emulated';
    currencies = exchange.fetch_currencies()
    # todo: try to invent something to avoid undefined undefined, i.e. maybe move into private and force it to have a value
    active_amount = 0
    minmium_active_currencies_pcnt = 40  # eg. at least X% currencies should be active
    required_active_currencies = ['BTC', 'ETH', 'USDT', 'USDC']
    if currencies is not None:
        values = list(currencies.values())
        test_shared_methods.assert_non_emtpy_array(exchange, skipped_properties, method, values)
        currencies_length = len(values)
        # ensure exchange returns enough length of currencies
        assert currencies_length > 5, exchange.id + ' ' + method + ' must return at least several currencies, but it returned ' + str(currencies_length)
        # allow skipped exchanges
        skip_active = ('active' in skipped_properties)
        # loop
        for i in range(0, currencies_length):
            currency_obj = values[i]
            test_currency(exchange, skipped_properties, method, currency_obj)
            # detailed check for deposit/withdraw
            active = exchange.safe_bool(currency_obj, 'active', False)
            if active:
                active_amount = active_amount + 1
            # ensure that major currencies are not disabled for W/D
            code = exchange.safe_string(currency_obj, 'code', None)
            if exchange.in_array(code, required_active_currencies):
                assert skip_active or active, 'Major currency ' + code + ' should have withdraw and deposit enabled'
        # check at least X% of currencies are active
        active_currencies_pcnt = (active_amount / currencies_length) * 100
        assert skip_active or (active_currencies_pcnt >= minmium_active_currencies_pcnt), 'Percentage of active currencies is too low at ' + str(active_currencies_pcnt) + '% that is less than the required minimum of ' + str(minmium_active_currencies_pcnt) + '%'
    return True
